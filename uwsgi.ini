; [uwsgi]
; # full path to Django project's root directory
; chdir            = /home/apps/ai_app/
; # Django's wsgi file
; module           = core.wsgi
; # full path to python virtual env
; home             = /root/.cache/pypoetry/virtualenvs/deeplearning-application-sGtMtOuF-py3.10
; # enable uwsgi master process
; master          = true
; # maximum number of worker processes
; processes       = 10
; # the socket (use the full path to be safe
; socket          = /home/apps/ai_app/core.sock
; # socket permissions
; chmod-socket    = 666
; # clear environment on exit
; vacuum          = true
; # daemonize uwsgi and write messages into given log
; daemonize       = /home/apps/ai_app/uwsgi-emperor.log

[uwsgi]
# full path to Django project's root directory
chdir            = /home/apps/ai_app/
# Django's wsgi file
module           = core.wsgi
# full path to python virtual env
home             = /root/.cache/pypoetry/virtualenvs/deeplearning-application-sGtMtOuF-py3.10
# enable uwsgi master process
master          = true
# maximum number of worker processes
processes       = 10
# the socket (use the full path to be safe
socket          = /home/apps/ai_app/core.sock
# socket permissions
chmod-socket    = 666
# clear environment on exit
vacuum          = true
# daemonize uwsgi and write messages into given log
daemonize       = /home/apps/ai_app/uwsgi-emperor.log

# Celery 설정
# Celery 워커 시작
celery-worker = celery -A core worker -l info

# Celery Beat 시작 (선택 사항, 주기적인 작업이 필요한 경우 활성화)
celery-beat = celery -A core beat -l info

# Celery 워커와 Beat의 로그 파일 (선택 사항)
log-to = /home/apps/ai_app/celery-worker.log
log-to = /home/apps/ai_app/celery-beat.log
